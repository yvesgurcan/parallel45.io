{"version":3,"sources":["webpack:///./src/components/Shared.EmbeddedYouTubeVideo.js","webpack:///./src/pages/blog.js"],"names":["videoId","ratio","Embed","title","src","frameborder","allow","allowfullscreen","styled","div","props","data","location","posts","allMarkdownRemark","edges","author","site","siteMetadata","images","allFile","nodes","map","node","frontmatter","defaultTitle","date","description","image","youtube","excerpt","slug","fields","toUpperCase","replace","substring","length","postImage","find","img","childImageSharp","fluid","originalName","Post","key","to","HeadlineAsset","alt","href","twitter","name","unstyled","dangerouslySetInnerHTML","__html","article","pageQuery"],"mappings":"2FAAA,qCAKe,oBAAGA,EAAH,EAAGA,QAAH,IAAYC,aAAZ,MAAoB,EAApB,SACX,kBAACC,EAAD,CAAOD,MAAOA,GACV,4BACIE,MAAOH,EACPI,IAAG,iCAAmCJ,EACtCK,YAAY,IACZC,MAAM,0EACNC,iBAAe,MAK3B,IAAML,EAAQM,IAAOC,IAAV,oFAAGD,CAAH,iVAOM,SAAAE,GAAK,OAAI,IAAMA,EAAMT,SACpB,SAAAS,GAAK,OAAI,IAAMA,EAAMT,QAtBpB,M,uOCOJ,sBAAyB,IAAtBU,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACdC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAAWL,EAAKM,KAAKC,aAArBF,OACFG,EAASR,EAAKS,QAAQC,MAE5B,OACI,kBAAC,IAAD,CAAQT,SAAUA,GACbC,EAAMS,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAAW,EAWjBA,EATAC,YACWC,EAHM,EAGbtB,MACAuB,EAJa,EAIbA,KACAC,EALa,EAKbA,YACAC,EANa,EAMbA,MACAC,EAPa,EAObA,QAEJC,EAEAP,EAFAO,QACUC,EACVR,EADAS,OAAUD,KAGR5B,EACFsB,GACAM,EAAK,GAAGE,cACJF,EACKG,QAAQ,KAAM,KACdA,QAAQ,MAAO,IACfC,UAAU,EAAGJ,EAAKK,OAAS,GAElCC,EAAYlB,EAAOmB,MACrB,SAAAC,GAAG,OAAIA,EAAIC,gBAAgBC,MAAMC,eAAiBd,KAEtD,OACI,kBAACe,EAAD,CAAMC,IAAKb,GACP,gCACI,kBAAC,IAAD,CAAcc,GAAE,QAAUd,GACtB,kBAAC,IAAD,KAAK5B,GACJkC,IAAcR,GACX,kBAACiB,EAAD,KACI,kBAAC,IAAD,CACIL,MACIJ,EAAUG,gBAAgBC,MAE9BM,IAAK5C,EACLA,MAAOA,KAIlB0B,GACG,kBAACiB,EAAD,KACI,kBAAC,IAAD,CACI9C,QAAS6B,EACT5B,MAAO,QAKvB,+BACKyB,GAAQ,8BAAOA,EAAP,KACT,8BACK,IADL,aAEe,IACX,kBAAC,IAAD,CAAcsB,KAAMhC,EAAOiC,SACtBjC,EAAOkC,MAJhB,OAWR,kBAAC,IAAD,CAAcL,GAAE,QAAUd,EAAQoB,UAAQ,GACtC,iCACI,uBACIC,wBAAyB,CACrBC,OAAQ1B,GAAeG,aAY/D,IAAMa,EAAOnC,IAAO8C,QAAV,iEAAG9C,CAAH,0BAIJsC,EAAgBtC,IAAOC,IAAV,0EAAGD,CAAH,4BAIN+C,EAAS","file":"component---src-pages-blog-js-cac45bff04ad7e6b2e9f.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst BREAKPOINT = 950;\n\nexport default ({ videoId, ratio = 1 }) => (\n    <Embed ratio={ratio}>\n        <iframe\n            title={videoId}\n            src={`https://www.youtube.com/embed/${videoId}`}\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen\n        />\n    </Embed>\n);\n\nconst Embed = styled.div`\n    background: black;\n    display: flex;\n    justify-content: center;\n    padding-bottom: 0;\n\n    iframe {\n        width: ${props => 100 * props.ratio}%;\n        height: ${props => 506 * props.ratio}px;\n        margin-bottom: 0;\n    }\n\n    @media only screen and (max-width: ${BREAKPOINT}px) {\n        position: relative;\n        padding-bottom: 56.25%;\n        height: 0;\n        overflow: hidden;\n        max-width: 100%;\n\n        iframe,\n        object,\n        embed {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            margin-bottom: 0;\n        }\n    }\n`;\n\n/*\n<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style><div class='embed-container'><iframe src='https://www.youtube.com/embed/QILiHiTD3uc' frameborder='0' allowfullscreen></iframe></div>\n*/\n","import React from 'react';\nimport styled from 'styled-components';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport Layout from '../components/Layout';\nimport InternalLink from '../components/Shared.InternalLink';\nimport ExternalLink from '../components/Shared.ExternalLink';\nimport { H2 } from '../components/Shared.Headings';\nimport EmbeddedYouTubeVideo from '../components/Shared.EmbeddedYouTubeVideo';\n\nexport default ({ data, location }) => {\n    const posts = data.allMarkdownRemark.edges;\n    const { author } = data.site.siteMetadata;\n    const images = data.allFile.nodes;\n\n    return (\n        <Layout location={location}>\n            {posts.map(({ node }) => {\n                const {\n                    frontmatter: {\n                        title: defaultTitle,\n                        date,\n                        description,\n                        image,\n                        youtube\n                    },\n                    excerpt,\n                    fields: { slug }\n                } = node;\n\n                const title =\n                    defaultTitle ||\n                    slug[1].toUpperCase() +\n                        slug\n                            .replace(/-/g, ' ')\n                            .replace(/\\//g, '')\n                            .substring(1, slug.length - 1);\n\n                const postImage = images.find(\n                    img => img.childImageSharp.fluid.originalName === image\n                );\n                return (\n                    <Post key={slug}>\n                        <header>\n                            <InternalLink to={`/blog${slug}`}>\n                                <H2>{title}</H2>\n                                {postImage && !youtube && (\n                                    <HeadlineAsset>\n                                        <Img\n                                            fluid={\n                                                postImage.childImageSharp.fluid\n                                            }\n                                            alt={title}\n                                            title={title}\n                                        />\n                                    </HeadlineAsset>\n                                )}\n                                {youtube && (\n                                    <HeadlineAsset>\n                                        <EmbeddedYouTubeVideo\n                                            videoId={youtube}\n                                            ratio={0.71}\n                                        />\n                                    </HeadlineAsset>\n                                )}\n                            </InternalLink>\n                            <small>\n                                {date && <span>{date}.</span>}\n                                <span>\n                                    {' '}\n                                    Written by{' '}\n                                    <ExternalLink href={author.twitter}>\n                                        {author.name}\n                                    </ExternalLink>\n                                    .\n                                </span>\n                            </small>\n                        </header>\n\n                        <InternalLink to={`/blog${slug}`} unstyled>\n                            <section>\n                                <p\n                                    dangerouslySetInnerHTML={{\n                                        __html: description || excerpt\n                                    }}\n                                />\n                            </section>\n                        </InternalLink>\n                    </Post>\n                );\n            })}\n        </Layout>\n    );\n};\n\nconst Post = styled.article`\n    padding-bottom: 1rem;\n`;\n\nconst HeadlineAsset = styled.div`\n    padding-bottom: 0.5rem;\n`;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                author {\n                    name\n                    twitter\n                }\n            }\n        }\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            edges {\n                node {\n                    excerpt(pruneLength: 350)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        image\n                        youtube\n                    }\n                }\n            }\n        }\n        allFile(filter: { relativePath: { regex: \"/blog-images/\" } }) {\n            nodes {\n                childImageSharp {\n                    fluid(maxWidth: 750, maxHeight: 362) {\n                        originalName\n                        ...GatsbyImageSharpFluid\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}