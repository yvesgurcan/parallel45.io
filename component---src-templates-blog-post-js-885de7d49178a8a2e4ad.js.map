{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["getTitle","frontmatterTitle","slug","toUpperCase","replace","substring","length","data","pageContext","location","post","markdownRemark","fields","frontmatter","excerpt","html","defaultTitle","title","date","image","author","site","siteMetadata","previous","next","images","allFile","nodes","postImage","find","img","childImageSharp","fluid","originalName","console","log","original","src","parent","description","imgSrc","PostImage","href","alt","twitter","name","dangerouslySetInnerHTML","__html","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","styled","div","pageQuery"],"mappings":"mRAOMA,EAAW,SAASC,EAAkBC,GACxC,OACID,GACAC,EAAK,GAAGC,cACJD,EACKE,QAAQ,KAAM,KACdA,QAAQ,MAAO,IACfC,UAAU,EAAGH,EAAKI,OAAS,IAI7B,sBAAsC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC3BC,EAAOH,EAAKI,eACVC,EAAuCF,EAAvCE,OAAQC,EAA+BH,EAA/BG,YAAaC,EAAkBJ,EAAlBI,QAASC,EAASL,EAATK,KAC9Bb,EAASU,EAATV,KACOc,EAA8BH,EAArCI,MAAqBC,EAAgBL,EAAhBK,KAAMC,EAAUN,EAAVM,MAC7BF,EAAQjB,EAASgB,EAAcd,GAC7BkB,EAAWb,EAAKc,KAAKC,aAArBF,OACAG,EAAmBf,EAAnBe,SAAUC,EAAShB,EAATgB,KACZC,EAASlB,EAAKmB,QAAQC,MACtBC,EACFT,GACAM,EAAOI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,gBAAgBC,MAAMC,eAAiBd,KAElE,OADAe,QAAQC,IAAIP,EAAUG,gBAAgBK,SAASC,KAE3C,kBAAC,IAAD,CACI5B,SAAQ,iBAAOA,EAAP,CAAiB6B,OAAQ,UACjCrB,MAAOA,EACPsB,YAAazB,EACb0B,OAAQZ,EAAUG,gBAAgBK,SAASC,KAE3C,iCACI,gCACKT,GACG,kBAACa,EAAD,KACI,kBAAC,IAAD,CACIC,KAAMd,EAAUG,gBAAgBK,SAASC,KAEzC,kBAAC,IAAD,CACIL,MAAOJ,EAAUG,gBAAgBC,MACjCW,IAAK1B,EACLA,MAAOA,MAKvB,2BACKC,GAAQ,8BAAOA,EAAP,KACT,8BACK,IADL,aAEe,IACX,kBAAC,IAAD,CAAcwB,KAAMtB,EAAOwB,SACtBxB,EAAOyB,MAJhB,OAUR,6BAASC,wBAAyB,CAAEC,OAAQhC,MAEhD,6BACI,wBACIiC,MAAO,CACHC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGb,4BACK9B,GACG,kBAAC,OAAD,CACI+B,GAAE,QAAU/B,EAASX,OAAOV,KAC5BqD,IAAI,QAFR,IAIM,IACDvD,EACGuB,EAASV,YAAYI,MACrBM,EAASX,OAAOV,QAKhC,4BACKsB,GACG,kBAAC,OAAD,CAAM8B,GAAE,QAAU9B,EAAKZ,OAAOV,KAAQqD,IAAI,QACrCvD,EACGwB,EAAKX,YAAYI,MACjBO,EAAKZ,OAAOV,MACb,IAJP,UAe5B,IAAMuC,EAAYe,IAAOC,IAAV,uEAAGD,CAAH,0BAIFE,EAAS","file":"component---src-templates-blog-post-js-885de7d49178a8a2e4ad.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Link, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport Layout from '../components/layout';\nimport ExternalLink from '../components/Shared.ExternalLink';\n\nconst getTitle = function(frontmatterTitle, slug) {\n    return (\n        frontmatterTitle ||\n        slug[1].toUpperCase() +\n            slug\n                .replace(/-/g, ' ')\n                .replace(/\\//g, '')\n                .substring(1, slug.length - 1)\n    );\n};\n\nexport default ({ data, pageContext, location }) => {\n    const post = data.markdownRemark;\n    const { fields, frontmatter, excerpt, html } = post;\n    const { slug } = fields;\n    const { title: defaultTitle, date, image } = frontmatter;\n    const title = getTitle(defaultTitle, slug);\n    const { author } = data.site.siteMetadata;\n    const { previous, next } = pageContext;\n    const images = data.allFile.nodes;\n    const postImage =\n        image &&\n        images.find(img => img.childImageSharp.fluid.originalName === image);\n    console.log(postImage.childImageSharp.original.src);\n    return (\n        <Layout\n            location={{ ...location, parent: '/blog' }}\n            title={title}\n            description={excerpt}\n            imgSrc={postImage.childImageSharp.original.src}\n        >\n            <article>\n                <header>\n                    {postImage && (\n                        <PostImage>\n                            <ExternalLink\n                                href={postImage.childImageSharp.original.src}\n                            >\n                                <Img\n                                    fluid={postImage.childImageSharp.fluid}\n                                    alt={title}\n                                    title={title}\n                                />\n                            </ExternalLink>\n                        </PostImage>\n                    )}\n                    <p>\n                        {date && <span>{date}.</span>}\n                        <span>\n                            {' '}\n                            Written by{' '}\n                            <ExternalLink href={author.twitter}>\n                                {author.name}\n                            </ExternalLink>\n                            .\n                        </span>\n                    </p>\n                </header>\n                <section dangerouslySetInnerHTML={{ __html: html }} />\n            </article>\n            <nav>\n                <ul\n                    style={{\n                        display: `flex`,\n                        flexWrap: `wrap`,\n                        justifyContent: `space-between`,\n                        listStyle: `none`,\n                        padding: 0\n                    }}\n                >\n                    <li>\n                        {previous && (\n                            <Link\n                                to={`/blog${previous.fields.slug}`}\n                                rel=\"prev\"\n                            >\n                                ←{' '}\n                                {getTitle(\n                                    previous.frontmatter.title,\n                                    previous.fields.slug\n                                )}\n                            </Link>\n                        )}\n                    </li>\n                    <li>\n                        {next && (\n                            <Link to={`/blog${next.fields.slug}`} rel=\"next\">\n                                {getTitle(\n                                    next.frontmatter.title,\n                                    next.fields.slug\n                                )}{' '}\n                                →\n                            </Link>\n                        )}\n                    </li>\n                </ul>\n            </nav>\n        </Layout>\n    );\n};\n\nconst PostImage = styled.div`\n    padding-bottom: 1rem;\n`;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug($slug: String!) {\n        site {\n            siteMetadata {\n                author {\n                    name\n                    twitter\n                }\n            }\n        }\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            fields {\n                slug\n            }\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                image\n            }\n        }\n        allFile(filter: { relativePath: { regex: \"/blog-images/\" } }) {\n            nodes {\n                childImageSharp {\n                    original {\n                        src\n                    }\n                    fluid(maxWidth: 750, maxHeight: 400) {\n                        originalName\n                        originalImg\n                        ...GatsbyImageSharpFluid\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}