{"version":3,"sources":["webpack:///./src/components/Shared.EmbeddedYouTubeVideo.js","webpack:///./src/templates/blog-post.js"],"names":["videoId","ratio","Embed","title","src","frameborder","allow","allowfullscreen","styled","div","props","getTitle","frontmatterTitle","slug","toUpperCase","replace","substring","length","data","pageContext","location","post","markdownRemark","fields","frontmatter","excerpt","html","defaultTitle","date","image","youtube","author","site","siteMetadata","previous","next","images","allFile","nodes","postImage","find","img","childImageSharp","fluid","originalName","parent","description","imgSrc","original","HeadlineAsset","href","alt","twitter","name","dangerouslySetInnerHTML","__html","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","pageQuery"],"mappings":"4FAAA,qCAKe,oBAAGA,EAAH,EAAGA,QAAH,IAAYC,aAAZ,MAAoB,EAApB,SACX,kBAACC,EAAD,CAAOD,MAAOA,GACV,4BACIE,MAAOH,EACPI,IAAG,iCAAmCJ,EACtCK,YAAY,IACZC,MAAM,0EACNC,iBAAe,MAK3B,IAAML,EAAQM,IAAOC,IAAV,oFAAGD,CAAH,iVAOM,SAAAE,GAAK,OAAI,IAAMA,EAAMT,SACpB,SAAAS,GAAK,OAAI,IAAMA,EAAMT,QAtBpB,M,qOCMbU,EAAW,SAASC,EAAkBC,GACxC,OACID,GACAC,EAAK,GAAGC,cACJD,EACKE,QAAQ,KAAM,KACdA,QAAQ,MAAO,IACfC,UAAU,EAAGH,EAAKI,OAAS,IAI7B,sBAAsC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC3BC,EAAOH,EAAKI,eACVC,EAAuCF,EAAvCE,OAAQC,EAA+BH,EAA/BG,YAAaC,EAAkBJ,EAAlBI,QAASC,EAASL,EAATK,KAC9Bb,EAASU,EAATV,KACOc,EAAuCH,EAA9CrB,MAAqByB,EAAyBJ,EAAzBI,KAAMC,EAAmBL,EAAnBK,MAAOC,EAAYN,EAAZM,QACpC3B,EAAQQ,EAASgB,EAAcd,GAC7BkB,EAAWb,EAAKc,KAAKC,aAArBF,OACAG,EAAmBf,EAAnBe,SAAUC,EAAShB,EAATgB,KACZC,EAASlB,EAAKmB,QAAQC,MACtBC,EACFV,GACAO,EAAOI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,gBAAgBC,MAAMC,eAAiBf,KAClE,OACI,kBAAC,IAAD,CACIT,SAAQ,iBAAOA,EAAP,CAAiByB,OAAQ,UACjC1C,MAAOA,EACP2C,YAAarB,EACbsB,OAAQR,GAAaA,EAAUG,gBAAgBM,SAAS5C,KAExD,iCACI,gCACKmC,IAAcT,GACX,kBAACmB,EAAD,KACI,kBAAC,IAAD,CACIC,KAAMX,EAAUG,gBAAgBM,SAAS5C,KAEzC,kBAAC,IAAD,CACIuC,MAAOJ,EAAUG,gBAAgBC,MACjCQ,IAAKhD,EACLA,MAAOA,MAKtB2B,GACG,kBAACmB,EAAD,KACI,kBAAC,IAAD,CACIjD,QAAS8B,EACT7B,MAAO,QAInB,2BACK2B,GAAQ,8BAAOA,EAAP,KACT,8BACK,IADL,aAEe,IACX,kBAAC,IAAD,CAAcsB,KAAMnB,EAAOqB,SACtBrB,EAAOsB,MAJhB,OAUR,6BAASC,wBAAyB,CAAEC,OAAQ7B,MAEhD,6BACI,wBACI8B,MAAO,CACHC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGb,4BACK3B,GACG,kBAAC,IAAD,CACI4B,GAAE,QAAU5B,EAASX,OAAOV,KAC5BkD,IAAI,QAFR,IAIM,IACDpD,EACGuB,EAASV,YAAYrB,MACrB+B,EAASX,OAAOV,QAKhC,4BACKsB,GACG,kBAAC,IAAD,CACI2B,GAAE,QAAU3B,EAAKZ,OAAOV,KACxBkD,IAAI,QAEHpD,EACGwB,EAAKX,YAAYrB,MACjBgC,EAAKZ,OAAOV,MACb,IAPP,UAkB5B,IAAMoC,EAAgBzC,IAAOC,IAAV,2EAAGD,CAAH,0BAINwD,EAAS","file":"component---src-templates-blog-post-js-9c71dacf754c5ca5971f.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst BREAKPOINT = 950;\n\nexport default ({ videoId, ratio = 1 }) => (\n    <Embed ratio={ratio}>\n        <iframe\n            title={videoId}\n            src={`https://www.youtube.com/embed/${videoId}`}\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen\n        />\n    </Embed>\n);\n\nconst Embed = styled.div`\n    background: black;\n    display: flex;\n    justify-content: center;\n    padding-bottom: 0;\n\n    iframe {\n        width: ${props => 100 * props.ratio}%;\n        height: ${props => 506 * props.ratio}px;\n        margin-bottom: 0;\n    }\n\n    @media only screen and (max-width: ${BREAKPOINT}px) {\n        position: relative;\n        padding-bottom: 56.25%;\n        height: 0;\n        overflow: hidden;\n        max-width: 100%;\n\n        iframe,\n        object,\n        embed {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            margin-bottom: 0;\n        }\n    }\n`;\n\n/*\n<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style><div class='embed-container'><iframe src='https://www.youtube.com/embed/QILiHiTD3uc' frameborder='0' allowfullscreen></iframe></div>\n*/\n","import React from 'react';\nimport styled from 'styled-components';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport Layout from '../components/Layout';\nimport InternalLink from '../components/Shared.InternalLink';\nimport ExternalLink from '../components/Shared.ExternalLink';\nimport EmbeddedYouTubeVideo from '../components/Shared.EmbeddedYouTubeVideo';\n\nconst getTitle = function(frontmatterTitle, slug) {\n    return (\n        frontmatterTitle ||\n        slug[1].toUpperCase() +\n            slug\n                .replace(/-/g, ' ')\n                .replace(/\\//g, '')\n                .substring(1, slug.length - 1)\n    );\n};\n\nexport default ({ data, pageContext, location }) => {\n    const post = data.markdownRemark;\n    const { fields, frontmatter, excerpt, html } = post;\n    const { slug } = fields;\n    const { title: defaultTitle, date, image, youtube } = frontmatter;\n    const title = getTitle(defaultTitle, slug);\n    const { author } = data.site.siteMetadata;\n    const { previous, next } = pageContext;\n    const images = data.allFile.nodes;\n    const postImage =\n        image &&\n        images.find(img => img.childImageSharp.fluid.originalName === image);\n    return (\n        <Layout\n            location={{ ...location, parent: '/blog' }}\n            title={title}\n            description={excerpt}\n            imgSrc={postImage && postImage.childImageSharp.original.src}\n        >\n            <article>\n                <header>\n                    {postImage && !youtube && (\n                        <HeadlineAsset>\n                            <ExternalLink\n                                href={postImage.childImageSharp.original.src}\n                            >\n                                <Img\n                                    fluid={postImage.childImageSharp.fluid}\n                                    alt={title}\n                                    title={title}\n                                />\n                            </ExternalLink>\n                        </HeadlineAsset>\n                    )}\n                    {youtube && (\n                        <HeadlineAsset>\n                            <EmbeddedYouTubeVideo\n                                videoId={youtube}\n                                ratio={0.945}\n                            />\n                        </HeadlineAsset>\n                    )}\n                    <p>\n                        {date && <span>{date}.</span>}\n                        <span>\n                            {' '}\n                            Written by{' '}\n                            <ExternalLink href={author.twitter}>\n                                {author.name}\n                            </ExternalLink>\n                            .\n                        </span>\n                    </p>\n                </header>\n                <section dangerouslySetInnerHTML={{ __html: html }} />\n            </article>\n            <nav>\n                <ul\n                    style={{\n                        display: `flex`,\n                        flexWrap: `wrap`,\n                        justifyContent: `space-between`,\n                        listStyle: `none`,\n                        padding: 0\n                    }}\n                >\n                    <li>\n                        {previous && (\n                            <InternalLink\n                                to={`/blog${previous.fields.slug}`}\n                                rel=\"prev\"\n                            >\n                                ←{' '}\n                                {getTitle(\n                                    previous.frontmatter.title,\n                                    previous.fields.slug\n                                )}\n                            </InternalLink>\n                        )}\n                    </li>\n                    <li>\n                        {next && (\n                            <InternalLink\n                                to={`/blog${next.fields.slug}`}\n                                rel=\"next\"\n                            >\n                                {getTitle(\n                                    next.frontmatter.title,\n                                    next.fields.slug\n                                )}{' '}\n                                →\n                            </InternalLink>\n                        )}\n                    </li>\n                </ul>\n            </nav>\n        </Layout>\n    );\n};\n\nconst HeadlineAsset = styled.div`\n    padding-bottom: 1rem;\n`;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug($slug: String!) {\n        site {\n            siteMetadata {\n                author {\n                    name\n                    twitter\n                }\n            }\n        }\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            fields {\n                slug\n            }\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                image\n                youtube\n            }\n        }\n        allFile(filter: { relativePath: { regex: \"/blog-images/\" } }) {\n            nodes {\n                childImageSharp {\n                    original {\n                        src\n                    }\n                    fluid(maxWidth: 750, maxHeight: 362) {\n                        originalName\n                        originalImg\n                        ...GatsbyImageSharpFluid\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}